using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;
using SharpDX.Direct3D9;
using Color = System.Drawing.Color;

namespace Lag_Exploit
{
    internal class Program
    {
        private static Obj_AI_Hero Player { get { return ObjectManager.Player; } }
        private static Menu Menu;
        private static int Traffic = 0;
        private static InventorySlot ward;

        private static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += Game_OnGameLoad;
            
        }

        private static void Game_OnGameLoad(EventArgs args)
        {
            Menu = new Menu("[xcsoft] Lag Exploit", "xcsoft_LagExploit", true);

            Menu.AddItem(new MenuItem("switch", "Switch").SetValue(new KeyBind(109, KeyBindType.Toggle)));
            Menu.AddItem(new MenuItem("power", "Power").SetValue(new Slider(100, 1, 200)));
            Menu.AddItem(new MenuItem("draw", "Draw").SetValue(true));

            Menu.AddToMainMenu();

            Game.OnGameUpdate += Game_OnGameUpdate;
            Drawing.OnDraw += Drawing_OnDraw;
        }

        private static void Game_OnGameUpdate(EventArgs args)
        {
            if (!Menu.Item("switch").GetValue<Boolean>() || Player.IsDead)
                return;

            PacketFlood();
        }

        private static InventorySlot GetUsableWard()
        {
            ward = GetWardSlot();

            if (ward == null || !ward.SpellSlot.IsReady())
                return ward;

            return null;
        }

        private static InventorySlot GetWardSlot()
        {
            var wardIds = new[] { 3340, 3350, 3361, 3154, 2045, 2049, 2050, 2044, 2043 };
            return (from wardId in wardIds
                    where Items.CanUseItem(wardId)
                    select ObjectManager.Player.InventoryItems.FirstOrDefault(slot => slot.Id == (ItemId)wardId))
                        .FirstOrDefault();
        }

        private static void Drawing_OnDraw(EventArgs args)
        {
            if (!Menu.Item("draw").GetValue<Boolean>() || Player.IsDead)
                return;

            var targetpos = Drawing.WorldToScreen(Player.Position);

            Drawing.DrawText(targetpos[0] - 10, targetpos[1] + 10, Color.Red, "Sent Packets: " + Traffic);
        }

        private static void PacketFlood()
        {
            Random rnd = new Random();

            for (int i = 1; i <= Menu.Item("power").GetValue<Slider>().Value; i++)
            {
                var vec = new Vector3(rnd.Next(-1000, 20000), rnd.Next(-1000, 20000), 100);

                if (Player.ServerPosition.Distance(vec, false) > 7000 && !vec.IsWall())
                {
                    Player.Spellbook.CastSpell(GetUsableWard().SpellSlot, vec);

                    Traffic++;
                }
            }
        }
    }
}
